paths:
  /api/users/:
    get: 
      tags:
        - Users
      summary: Get all users from the DB
      responses:
        "200":
          description: Users fetched from the DB successfully
          content:
            application/json:
              schema:
                $ref: '#components/schemas/UsersResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#components/schemas/500ErrorResponse'
  
  /api/users/{userId}:
    get:
      tags:
        - Users
      summary: Get a single user by their Id
      parameters:
        - name: userId
          in: path
          required: true
          description: User Id to fetch
          schema:
            $type: string
      responses:
        "200":
          description: User from DB with given userId
          content:
            application/json:
              schema:
                $ref: '#components/schemas/UserResponse'
        "404":
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#components/schemas/404ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#components/schemas/500ErrorResponse'
    
    put:
      tags:
        - Users
      summary: Update a single user by their Id
      parameters:
        - name: userId
          in: path
          required: true
          description: User Id to fetch
          schema:
            $type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/requestBodies/UpdateUserPayload'
      responses:
        "200":
          description: Updated user with the given userId
          content:
            application/json:
              schema:
                $ref: '#components/schemas/UserResponse'
        "400":
          description: Invalid Body format
          content:
            application/json:
              schema:
                $ref: '#components/schemas/400ErrorResponse'
        "404":
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#components/schemas/404ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#components/schemas/500ErrorResponse'

    delete:
      tags:
        - Users
      summary: Delete a single user by their Id
      parameters:
        - name: userId
          in: path
          required: true
          description: User Id to fetch
          schema:
            $type: string
      responses:
        "200":
          description: Deleted user with the given userId
          content:
            application/json:
              schema:
                $ref: '#components/schemas/UserResponse'
        "404":
          description: User Not Found
          content:
            application/json:
              schema:
                $ref: '#components/schemas/404ErrorResponse'
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#components/schemas/500ErrorResponse'
          

components:
  schemas:
    User:
      type: object
      properties:
        _id:
          type: ObjectId
          description: Autogenerated MongoDB ID
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        age: 
          type: number
          description: User's age
        email:
          type: string
          description: User's email (Unique field)
        role:
          type: string
          description: User's role
        password:
          type: string
          description: User's hashed password
        cart:
          type: ObjectId
          description: User's cart referenced to an autogenerated MongoDB ID 
      example:
        _id: ObjectId (riv3boc1lib09122018)
        first_name: Marcelo
        last_name: Gallardo
        age: 31
        email: river@elmasgrande.com
        role: USER
        password: $hwi38TYIJhsgy52d3j2y
        cart: ObjectId (abr432bvf256vtwy23)
              
    UsersResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          description: Users response status
        payload:
          type: array
          description: Users array list
          items:
            $ref: '#components/schemas/User'
    
    UserResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
          description: User response status
        payload:
            $ref: '#components/schemas/User'

    400ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
          description: Error response status
        payload:
          type: object
          properties:
            statusCode:
              enum: [400]
            error:
              enum: [Bad Request]

    404ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
          description: Error response status
        payload:
          type: object
          properties:
            statusCode:
              enum: [404]
            error:
              enum: [Not Found]

    500ErrorResponse:
      type: object
      properties:
        status:
          type: string
          enum: [error]
          description: Error response status
        payload:
          type: object
          properties:
            statusCode:
              enum: [500]
            error:
              enum: [Internal Server Error]


  requestBodies:
    UpdateUserPayload:
      type: object
      properties:
        first_name:
          type: string
          description: User's first name
        last_name:
          type: string
          description: User's last name
        age: 
          type: number
          description: User's age
        email:
          type: string
          description: User's email (Unique field)
        role:
          type: string
          description: User's role
        password:
          type: string
          description: User's password
        cart:
          type: ObjectId
          description: User's cart referenced to an autogenerated MongoDB ID
      example:
        first_name: Marcelo
        last_name: Gallardo
        age: 31
        email: river@elmasgrande.com
        role: USER
        password: pass123word789
